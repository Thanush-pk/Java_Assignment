<<<<<<< HEAD
//1
db.restaurant.find().pretty()

//2
 db.restaurant.find({},{restaurant_id:1,name:1,borough:1,cuisine:1}).pretty()

//3
db.restaurant.find({},{restaurant_id:1,name:1,borough:1,cuisine:1,_id:0}).pretty()

//4
db.restaurant.find({},{restaurant_id:1,name:1,borough:1,"address.zipcode":1,_id:0}).pretty()

//5
db.restaurant.find( { borough: "Bronx" }).pretty()
//6 

db.restaurant.find({ borough: "Bronx" }).limit(5).pretty()
7//
db.restaurant.find({borough:"Bronx"}).skip(5).limit(5).pretty()

8//
db.restaurant.find({"grades.score":{$gt:90}}).pretty()

//9
db.restaurant.find({"grades.score":{$gt:80,$lt:100}}).pretty()

//10
db.restaurant.find({"address.coord":{$lt:95.754168}}).pretty()

//11
db.restaurant.find({cuisine:{$ne:"American "},"grades.score":{$gt:70},"address.coord":{$lt:-65.754168}}).pretty()

//12
db.restaurant.find({cuisine:{$ne:"American "},"grades.score":{$gt:70},"address.coord":{$lt:-65.754168}}).pretty()

//13
db.restaurant.find({cuisine:{$ne:"American "},"grades.score":{$gt:70},"borough":{$ne:"Brooklyn"}}).pretty()

//14
db.restaurant.find({name: /^Wil/},{"restaurant_id" : 1,"name":1,"borough":1,"cuisine" :1});

//15
db.restaurant.find({name: /ces$/},{"restaurant_id" : 1,"name":1,"borough":1,"cuisine" :1});

//16 Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those
restaurants which contain 'Reg' as three letters somewhere in its name.

db.restaurant.find({"name": /.*Reg.*/},{"restaurant_id" : 1,"name":1,"borough":1,"cuisine" :1});

//17 Write a MongoDB query to find the restaurants which belong to the borough Bronx and
prepared either American or Chinese dish.

db.restaurant.find({ "borough": "Bronx" , $or : [{ "cuisine" : "American " },{ "cuisine" : "Chinese" }] } ).pretty()

//18 Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which belong to 
the borough Staten Island or Queens or Bronx or Brooklyn. 

db.restaurant.find( {"borough" :{$in :["Staten Island","Queens","Bronx","Brooklyn"]}},
 { "restaurant_id" : 1, "name":1,"borough":1, "cuisine" :1 } ).pretty()

//19 Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those
restaurants which are not belonging to the borough Staten Island or Queens or Bronxor
Brooklyn.

db.restaurant.find( {"borough" :{$nin :["Staten Island","Queens","Bronx","Brooklyn"]}},
 { "restaurant_id" : 1, "name":1,"borough":1, "cuisine" :1 } ).pretty()

20. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which achieved
 a score which is not more than 10. 

db.restaurant.find( {"grades.score" : { $not: {$gt : 10} } }, { "restaurant_id" : 1, "name":1,"borough":1, "cuisine" :1 } ).pretty()

21. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which prepared dish except
 'American' and 'Chinees' or restaurant's name begins with letter 'Wil'. 
db.restaurant.find( {$or: [ {name: /^Wil/}, {"$and": [ {"cuisine" : {$ne :"American "}}, {"cuisine" : {$ne :"Chinees"}} ]} ]},
{"restaurant_id" : 1,"name":1,"borough":1,"cuisine" :1} ).pretty()

 22. Write a MongoDB query to find the restaurant Id, name, and grades for those restaurants which achieved a grade of "A" and
 scored 11 on an ISODate "2014-0811T00:00:00Z" among many of survey dates..

 db.restaurant.find( { "grades.date": ISODate("2014-08-11T00:00:00Z"), "grades.grade":"A" , "grades.score" : 11 }, 
{"restaurant_id" : 1,"name":1,"grades":1} ).pretty()

 23. Write a MongoDB query to find the restaurant Id, name and grades for those restaurants where the 2nd element 
of grades array contains a grade of "A" and score 9 on an ISODate "2014-08-11T00:00:00Z". 

db.restaurant.find( { "grades.1.date": ISODate("2014-08-11T00:00:00Z"), "grades.1.grade":"A" , "grades.1.score" : 9 },
 {"restaurant_id" : 1,"name":1,"grades":1} ).pretty()

24. Write a MongoDB query to find the restaurant Id, name, address and geographical location for those restaurants where 
2nd element of coord array contains a value which is more than 42 and upto 52.. 

db.restaurant.find( { "address.coord.1": {$gt : 42, $lte : 52} }, {"restaurant_id" : 1,"name":1,"address":1,"coord":1} ).pretty()

25. Write a MongoDB query to arrange the name of the restaurants in ascending order along with all the columns. 
db.restaurant.find().sort({"name":1}).pretty()

26. Write a MongoDB query to arrange the name of the restaurants in descending along with all the columns. 
db.restaurant.find().sort( {"name":-1} ).pretty() 

27. Write a MongoDB query to arranged the name of the cuisine in ascending order
and for that same cuisine borough should be in descending order. 
db.restaurant.find().sort( {"cuisine":1,"borough" : -1,} ).pretty()

28. Write a MongoDB query to know whether all the addresses contains the street or not.
db.restaurant.find( {"address.street" : { $exists : true } } ).pretty()

29. Write a MongoDB query which will select all documents in the restaurants collection where the coord field value is Double. 
db.restaurant.find( {"address.coord" : {$type : 1} } ).pretty()

30. Write a MongoDB query which will select the restaurant Id, name and grades for those restaurants which returns 0 as a remainder 
after dividing the score by 7. 
db.restaurants.find( {"grades.score" : {$mod : [7,0]} }, {"restaurant_id" : 1,"name":1,"grades":1} )..pretty()

31. Write a MongoDB query to find the restaurant name, borough, longitude and attitude and cuisine for those restaurants which contains
 'mon' as three letters somewhere in its name.
db.restaurant.find( { name : { $regex : "mon.*", $options: "i" } }, { "name":1, "borough":1, "address.coord":1, "cuisine" :1 } ).pretty()

32. Write a MongoDB query to find the restaurant name, borough, longitude and latitude and cuisine for those restaurants which contain 'Mad'
as first three letters of its name. 
db.restaurant.find( { name : { $regex : /^Mad/i, } }, { "name":1, "borough":1, "address.coord":1, "cuisine" :1 } ).pretty()

33.

db.restaurent.aggregate([
{$group:{-id:"$cuisine",$count{$sum:1}}
}])


db.restaurant.aggregate( [
   { $group: { _id: "$cusine", grades.score:grades.$score: { $avg: "$score" } } }
] )
=======
//1
db.restaurant.find().pretty()

//2
 db.restaurant.find({},{restaurant_id:1,name:1,borough:1,cuisine:1}).pretty()

//3
db.restaurant.find({},{restaurant_id:1,name:1,borough:1,cuisine:1,_id:0}).pretty()

//4
db.restaurant.find({},{restaurant_id:1,name:1,borough:1,"address.zipcode":1,_id:0}).pretty()

//5
db.restaurant.find( { borough: "Bronx" }).pretty()
//6 

db.restaurant.find({ borough: "Bronx" }).limit(5).pretty()
7//
db.restaurant.find({borough:"Bronx"}).skip(5).limit(5).pretty()

8//
db.restaurant.find({"grades.score":{$gt:90}}).pretty()

//9
db.restaurant.find({"grades.score":{$gt:80,$lt:100}}).pretty()

//10
db.restaurant.find({"address.coord":{$lt:95.754168}}).pretty()

//11
db.restaurant.find({cuisine:{$ne:"American "},"grades.score":{$gt:70},"address.coord":{$lt:-65.754168}}).pretty()

//12
db.restaurant.find({cuisine:{$ne:"American "},"grades.score":{$gt:70},"address.coord":{$lt:-65.754168}}).pretty()

//13
db.restaurant.find({cuisine:{$ne:"American "},"grades.score":{$gt:70},"borough":{$ne:"Brooklyn"}}).pretty()

//14
db.restaurant.find({name: /^Wil/},{"restaurant_id" : 1,"name":1,"borough":1,"cuisine" :1});

//15
db.restaurant.find({name: /ces$/},{"restaurant_id" : 1,"name":1,"borough":1,"cuisine" :1});

//16 Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those
restaurants which contain 'Reg' as three letters somewhere in its name.

db.restaurant.find({"name": /.*Reg.*/},{"restaurant_id" : 1,"name":1,"borough":1,"cuisine" :1});

//17 Write a MongoDB query to find the restaurants which belong to the borough Bronx and
prepared either American or Chinese dish.

db.restaurant.find({ "borough": "Bronx" , $or : [{ "cuisine" : "American " },{ "cuisine" : "Chinese" }] } ).pretty()

//18 Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which belong to 
the borough Staten Island or Queens or Bronx or Brooklyn. 

db.restaurant.find( {"borough" :{$in :["Staten Island","Queens","Bronx","Brooklyn"]}},
 { "restaurant_id" : 1, "name":1,"borough":1, "cuisine" :1 } ).pretty()

//19 Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those
restaurants which are not belonging to the borough Staten Island or Queens or Bronxor
Brooklyn.

db.restaurant.find( {"borough" :{$nin :["Staten Island","Queens","Bronx","Brooklyn"]}},
 { "restaurant_id" : 1, "name":1,"borough":1, "cuisine" :1 } ).pretty()

20. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which achieved
 a score which is not more than 10. 

db.restaurant.find( {"grades.score" : { $not: {$gt : 10} } }, { "restaurant_id" : 1, "name":1,"borough":1, "cuisine" :1 } ).pretty()

21. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which prepared dish except
 'American' and 'Chinees' or restaurant's name begins with letter 'Wil'. 
db.restaurant.find( {$or: [ {name: /^Wil/}, {"$and": [ {"cuisine" : {$ne :"American "}}, {"cuisine" : {$ne :"Chinees"}} ]} ]},
{"restaurant_id" : 1,"name":1,"borough":1,"cuisine" :1} ).pretty()

 22. Write a MongoDB query to find the restaurant Id, name, and grades for those restaurants which achieved a grade of "A" and
 scored 11 on an ISODate "2014-0811T00:00:00Z" among many of survey dates..

 db.restaurant.find( { "grades.date": ISODate("2014-08-11T00:00:00Z"), "grades.grade":"A" , "grades.score" : 11 }, 
{"restaurant_id" : 1,"name":1,"grades":1} ).pretty()

 23. Write a MongoDB query to find the restaurant Id, name and grades for those restaurants where the 2nd element 
of grades array contains a grade of "A" and score 9 on an ISODate "2014-08-11T00:00:00Z". 

db.restaurant.find( { "grades.1.date": ISODate("2014-08-11T00:00:00Z"), "grades.1.grade":"A" , "grades.1.score" : 9 },
 {"restaurant_id" : 1,"name":1,"grades":1} ).pretty()

24. Write a MongoDB query to find the restaurant Id, name, address and geographical location for those restaurants where 
2nd element of coord array contains a value which is more than 42 and upto 52.. 

db.restaurant.find( { "address.coord.1": {$gt : 42, $lte : 52} }, {"restaurant_id" : 1,"name":1,"address":1,"coord":1} ).pretty()

25. Write a MongoDB query to arrange the name of the restaurants in ascending order along with all the columns. 
db.restaurant.find().sort({"name":1}).pretty()

26. Write a MongoDB query to arrange the name of the restaurants in descending along with all the columns. 
db.restaurant.find().sort( {"name":-1} ).pretty() 

27. Write a MongoDB query to arranged the name of the cuisine in ascending order
and for that same cuisine borough should be in descending order. 
db.restaurant.find().sort( {"cuisine":1,"borough" : -1,} ).pretty()

28. Write a MongoDB query to know whether all the addresses contains the street or not.
db.restaurant.find( {"address.street" : { $exists : true } } ).pretty()

29. Write a MongoDB query which will select all documents in the restaurants collection where the coord field value is Double. 
db.restaurant.find( {"address.coord" : {$type : 1} } ).pretty()

30. Write a MongoDB query which will select the restaurant Id, name and grades for those restaurants which returns 0 as a remainder 
after dividing the score by 7. 
db.restaurants.find( {"grades.score" : {$mod : [7,0]} }, {"restaurant_id" : 1,"name":1,"grades":1} )..pretty()

31. Write a MongoDB query to find the restaurant name, borough, longitude and attitude and cuisine for those restaurants which contains
 'mon' as three letters somewhere in its name.
db.restaurant.find( { name : { $regex : "mon.*", $options: "i" } }, { "name":1, "borough":1, "address.coord":1, "cuisine" :1 } ).pretty()

32. Write a MongoDB query to find the restaurant name, borough, longitude and latitude and cuisine for those restaurants which contain 'Mad'
as first three letters of its name. 
db.restaurant.find( { name : { $regex : /^Mad/i, } }, { "name":1, "borough":1, "address.coord":1, "cuisine" :1 } ).pretty()

33.

db.restaurent.aggregate([
{$group:{-id:"$cuisine",$count{$sum:1}}
}])


db.restaurant.aggregate( [
   { $group: { _id: "$cusine", grades.score:grades.$score: { $avg: "$score" } } }
] )
>>>>>>> c27462c963093410aedbaf8ffc838e3959a3e3d9
